# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Adminlogs(models.Model):
    admin = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    action = models.TextField()
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'adminlogs'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Cars(models.Model):
    brand = models.CharField(max_length=255, blank=True, null=True)
    model = models.CharField(max_length=255, blank=True, null=True)
    year = models.CharField(max_length=4, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cars'


class Consultationhistory(models.Model):
    consultation = models.ForeignKey('Consultations', models.DO_NOTHING, blank=True, null=True)
    completed_at = models.DateTimeField(blank=True, null=True)
    outcome = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'consultationhistory'


class Consultations(models.Model):
    nurse = models.ForeignKey('Nurses', models.DO_NOTHING, blank=True, null=True)
    management = models.ForeignKey('Management', models.DO_NOTHING, blank=True, null=True)
    schedule_time = models.DateTimeField()
    real_time = models.DateTimeField(blank=True, null=True)
    status = models.CharField(max_length=50)
    notes = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'consultations'


class CoreAdminlog(models.Model):
    id = models.BigAutoField(primary_key=True)
    action = models.TextField()
    created_at = models.DateTimeField()
    admin = models.ForeignKey('CoreUsers', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_adminlog'


class CoreConsultation(models.Model):
    id = models.BigAutoField(primary_key=True)
    schedule_time = models.DateTimeField()
    real_time = models.DateTimeField(blank=True, null=True)
    status = models.CharField(max_length=50)
    notes = models.TextField(blank=True, null=True)
    management = models.ForeignKey('CoreManagement', models.DO_NOTHING)
    nurse = models.ForeignKey('CoreNurse', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_consultation'


class CoreConsultationhistory(models.Model):
    id = models.BigAutoField(primary_key=True)
    completed_at = models.DateTimeField()
    outcome = models.TextField()
    consultation = models.ForeignKey(CoreConsultation, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_consultationhistory'


class CoreManagement(models.Model):
    id = models.BigAutoField(primary_key=True)
    department = models.CharField(max_length=255)
    full_name = models.CharField(max_length=255)
    user = models.OneToOneField('CoreUsers', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_management'


class CoreModule(models.Model):
    id = models.BigAutoField(primary_key=True)
    title = models.CharField(max_length=255)
    description = models.TextField()
    content_url = models.CharField(max_length=200)
    created_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'core_module'


class CoreNurse(models.Model):
    id = models.BigAutoField(primary_key=True)
    full_name = models.CharField(max_length=50)
    date_of_joining = models.DateField()
    profile_picture = models.CharField(max_length=200, blank=True, null=True)
    status = models.CharField(max_length=50)
    user = models.OneToOneField('CoreUsers', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_nurse'


class CoreNurselevel(models.Model):
    id = models.BigAutoField(primary_key=True)
    level_name = models.CharField(max_length=50)
    criteria = models.TextField()
    required_modules = models.JSONField()

    class Meta:
        managed = False
        db_table = 'core_nurselevel'


class CorePerformance(models.Model):
    id = models.BigAutoField(primary_key=True)
    consultation_count = models.IntegerField()
    level_progress = models.CharField(max_length=50)
    feedback = models.TextField()
    updated_at = models.DateTimeField()
    nurse = models.ForeignKey(CoreNurse, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_performance'


class CoreUsers(models.Model):
    id = models.BigAutoField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    role = models.CharField(max_length=50)
    email = models.CharField(unique=True, max_length=254)

    class Meta:
        managed = False
        db_table = 'core_users'


class CoreUsersGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    users = models.ForeignKey(CoreUsers, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_users_groups'
        unique_together = (('users', 'group'),)


class CoreUsersUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    users = models.ForeignKey(CoreUsers, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_users_user_permissions'
        unique_together = (('users', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Employees(models.Model):
    name = models.CharField(max_length=100, blank=True, null=True)
    position = models.CharField(max_length=50, blank=True, null=True)
    department = models.CharField(max_length=50, blank=True, null=True)
    salary = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    hire_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'employees'


class EmployeesEmployee(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=100)
    position = models.CharField(max_length=50)
    salary = models.DecimalField(max_digits=10, decimal_places=2)

    class Meta:
        managed = False
        db_table = 'employees_employee'


class Management(models.Model):
    management = models.OneToOneField('Users', models.DO_NOTHING, primary_key=True)
    department = models.CharField(max_length=255, blank=True, null=True)
    full_name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'management'


class Modules(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    content_url = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'modules'


class Nurselevels(models.Model):
    level_name = models.CharField(max_length=50)
    criteria = models.TextField()
    required_modules = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nurselevels'


class Nurses(models.Model):
    nurse = models.OneToOneField('Users', models.DO_NOTHING, primary_key=True)
    full_name = models.CharField(max_length=255)
    level = models.CharField(max_length=50)
    date_of_joining = models.DateField()
    profile_picture = models.CharField(max_length=255, blank=True, null=True)
    status = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nurses'


class Performance(models.Model):
    nurse = models.ForeignKey(Nurses, models.DO_NOTHING, blank=True, null=True)
    consultation_count = models.IntegerField(blank=True, null=True)
    level_progress = models.CharField(max_length=50, blank=True, null=True)
    feedback = models.TextField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'performance'


class Users(models.Model):
    username = models.CharField(unique=True, max_length=255)
    password = models.CharField(max_length=255)
    role = models.CharField(max_length=50)
    email = models.CharField(unique=True, max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users'
